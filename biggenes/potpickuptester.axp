<patch-1.0 appVersion="1.0.12">
   <obj type="tiar/disp/scope" uuid="0991142e-58fa-47e6-9f89-32da05f9fe41" name="scope_1" x="644" y="56">
      <params/>
      <attribs/>
   </obj>
   <obj type="ksoloti/big genes/pot denoise p" uuid="25347fab-c33f-4652-bf36-b7f52d08b937" name="pot_2" x="0" y="112">
      <params/>
      <attribs>
         <combo attributeName="pot" selection="1"/>
         <spinner attributeName="threshold" value="12"/>
      </attribs>
   </obj>
   <obj type="osc/brds/sinefold" uuid="31f491d0-217b-46d6-9f6b-05dfee4fb6b2" name="sinefold_1" x="448" y="154">
      <params>
         <frac32.s.map name="pitch" MidiCC="1" value="6.0"/>
         <frac32.u.map name="timbre" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ksoloti/big genes/pot p" uuid="c0d0da2a-8aaa-4079-a442-285af3a74fa6" name="pot_1" x="28" y="210">
      <params/>
      <attribs>
         <combo attributeName="pot" selection="1"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="b6b8c6ea-dffd-4cab-a592-04dd72e133ec" name="object_1" x="182" y="224">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="b6b8c6ea-dffd-4cab-a592-04dd72e133ec">
         <inlets>
            <frac32.positive name="P1"/>
            <int32 name="encA"/>
         </inlets>
         <outlets>
            <frac32.positive name="o1"/>
            <charptr32 name="S1L1"/>
            <int32 name="S1mode"/>
         </outlets>
         <displays>
            <int32.label name="d1"/>
            <frac32.u.dial name="d2"/>
         </displays>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[char* state[2] = {"osc1", "osc2"};
int numstates = *(&state + 1) - state - 1;
int currentstate;
int prevstate;
bool ppwait1; // a variable that tells me to wait for the pot
int osc1pitch_hold; // a variable to store the value when in other menu
char osc1pitch_c[10]; // var to display with a bar the variable
int osc2pitch_hold; // a variable to store the value when in other menu
char osc2pitch_c[10]; // var to display with a bar the variable
int32_t lsend;
int timer;

// pot pickup function
int32_t ppchange (int in, int* hold, bool &ppwait){
//	if (timer==0) LogTextMessage((char*)(ppwait));
	if (ppwait==true){
		if (abs(in - *hold)>>20 < 2) {
			ppwait = false;
		}
		return *hold; ///goes to out!
	} else {
		*hold = in;
		return in; ///goes to out!
	}
}



//append int tot str for displaying a value
char* addItoS(int i, char* s, char* c){
	int32_t v = __SSAT(i,28)>>21;
	strcpy(&c[2],s);
	c[0] = 1;
	if(v >= 0)
  		c[1] = (uint8_t)(v + 1); // must not be zero !
	else 
	  	c[1] = (uint8_t)(256 + v); 
	return c;
}



//midiCCthin for sending the values to my controls in the patch
void midiCCout(int v, int cc, int channel){
	if (((lsend>v+(1<<19))||(v>lsend+(1<<19))) && (timer>60)) {
	   lsend = v;
	   PatchMidiInHandler(MIDI_DEVICE_INTERNAL ,0,MIDI_CONTROL_CHANGE + (channel-1),cc,__USAT(v>>20,7));
	   timer = 0;
	} else {
		timer++;
	}
}]]></code.declaration>
         <code.init><![CDATA[//osc1
osc1pitch_hold = 29<<20;

//osc2
osc2pitch_hold = 29<<20;]]></code.init>
         <code.krate><![CDATA[currentstate = inlet_encA;
//if (currentstate > 1) {currentstate = 1;}
///buttonpresses MENU up/down
if (currentstate != prevstate) {
   ppwait1=true; //enable potpickup wait on change
   prevstate = currentstate;
}

disp_d2 = inlet_P1;

if (state[currentstate] == "osc1"){
	outlet_S1mode = 0;
	midiCCout(ppchange (inlet_P1, &osc1pitch_hold, ppwait1), 1, 1);
	outlet_S1L1 = addItoS(osc1pitch_hold,"o1frq",osc1pitch_c);
}


if (state[currentstate] == "osc2"){
	outlet_S1mode = 0;
	midiCCout(ppchange (inlet_P1, &osc2pitch_hold, ppwait1), 2, 1);
	outlet_S1L1 = addItoS(osc2pitch_hold,"o2frq",osc2pitch_c);
}]]></code.krate>
      </object>
   </patchobj>
   <obj type="ksoloti/big genes/display" uuid="d21f1023-b829-4934-b142-5eedb601a570" name="display_1" x="308" y="224">
      <params/>
      <attribs>
         <combo attributeName="useScope" selection="on"/>
         <objref attributeName="scope" obj="scope_1"/>
         <combo attributeName="narrowFont" selection="on"/>
      </attribs>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="658" y="252">
      <params/>
      <attribs/>
   </obj>
   <obj type="ksoloti/big genes/encoder" uuid="1d83da76-97a3-4e59-85ce-9b2cdfd047d7" name="encoder_1" x="28" y="294">
      <params/>
      <attribs>
         <combo attributeName="encoder" selection="1"/>
         <spinner attributeName="min" value="0"/>
         <spinner attributeName="max" value="1"/>
      </attribs>
   </obj>
   <obj type="osc/brds/sinefold" uuid="31f491d0-217b-46d6-9f6b-05dfee4fb6b2" name="sinefold_2" x="448" y="336">
      <params>
         <frac32.s.map name="pitch" MidiCC="2" value="20.0"/>
         <frac32.u.map name="timbre" value="35.5"/>
      </params>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="sinefold_1" outlet="wave"/>
         <dest obj="scope_1" inlet="in"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="sinefold_2" outlet="wave"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="encoder_1" outlet="out"/>
         <dest obj="object_1" inlet="encA"/>
      </net>
      <net>
         <source obj="object_1" outlet="S1L1"/>
         <dest obj="display_1" inlet="line1"/>
      </net>
      <net>
         <source obj="object_1" outlet="S1mode"/>
         <dest obj="display_1" inlet="mode"/>
      </net>
      <net>
         <source obj="pot_2" outlet="out"/>
         <dest obj="object_1" inlet="P1"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>838</x>
      <y>145</y>
      <width>902</width>
      <height>725</height>
   </windowPos>
</patch-1.0>