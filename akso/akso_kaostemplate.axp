<patch appVersion="3.0.1">
   <obj type="trs-config/input-left" uuid="3cae3358-735d-4c12-9f70-45ee115ae66c" name="input-left_1" x="42" y="56">
      <params/>
      <attribs>
         <combo attributeName="mode" selection="Stereo"/>
         <combo attributeName="input_signal" selection="Differential"/>
         <combo attributeName="scale" selection="Line Level"/>
         <combo attributeName="cv_bias" selection="Bipolar (-5 to +5V)"/>
      </attribs>
   </obj>
   <obj type="trs-config/input-right" uuid="0dbc188c-e64d-4682-ae1c-6388de80c90f" name="input-right_1" x="238" y="56">
      <params/>
      <attribs>
         <combo attributeName="mode" selection="Aux Stereo"/>
         <combo attributeName="input_signal" selection="Differential"/>
         <combo attributeName="scale" selection="CV"/>
         <combo attributeName="cv_bias" selection="Bipolar (-5 to +5V)"/>
      </attribs>
   </obj>
   <obj type="trs-config/output-left" uuid="e8fe1932-a609-4309-9266-601a755eb3a6" name="output-left_1" x="658" y="84">
      <params/>
      <attribs>
         <combo attributeName="mode" selection="Stereo"/>
         <combo attributeName="ring_mode" selection="Unbalanced"/>
         <combo attributeName="scale" selection="Line Level"/>
         <combo attributeName="cv_bias" selection="Bipolar (-5 to +5V)"/>
      </attribs>
   </obj>
   <obj type="trs-config/output-right" uuid="69ade2e7-7857-49fb-a7a4-b563342513ae" name="output-right_1" x="812" y="84">
      <params/>
      <attribs>
         <combo attributeName="mode" selection="Mono (Fixed)"/>
         <combo attributeName="ring_mode" selection="Unbalanced"/>
         <combo attributeName="scale" selection="CV"/>
         <combo attributeName="cv_bias" selection="Unipolar (0 to +10V)"/>
      </attribs>
   </obj>
   <obj type="trs-config/headphone" uuid="7078daba-7e7f-4897-ad92-92f431baf24c" name="headphone_1" x="1036" y="84">
      <params/>
      <attribs>
         <combo attributeName="headphones" selection="-54dB"/>
      </attribs>
   </obj>
   <obj type="gpio/i2c/config" uuid="b095a33e56de5fcd23740a7d983bc0bafb315d81" name="config_1" x="840" y="224">
      <params/>
      <attribs/>
   </obj>
   <obj type="lfo/saw down" uuid="d831d6b82b3d559c3ba7b1b487fb292d7998fd08" name="saw_1" x="112" y="238">
      <params>
         <frac32.s.map name="pitch" onParent="false" value="0.0">
            <presets/>
         </frac32.s.map>
      </params>
      <attribs/>
   </obj>
   <obj type="gpio/out/pwm t5" uuid="73c0c557-0e70-401a-8c07-460c0010710b" name="pwm_2" x="224" y="238">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" name="42" x="952" y="238" text="&lt;-- MANDATORY !!!"/>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_1" x="518" y="252">
      <params>
         <frac32.s.map name="pitch" onParent="false" value="-64.0">
            <presets/>
         </frac32.s.map>
      </params>
      <attribs/>
   </obj>
   <obj type="tiar/conv/f_to_c" uuid="a16394eb-0588-4449-abdc-bc73587f1b71" name="f_to_c_1" x="602" y="252">
      <params/>
      <attribs>
         <table attributeName="prefix" table="LFO1:"/>
      </attribs>
   </obj>
   <patchobj type="tiar/HW/OLED128x64niceWOScope" uuid="5bde8c3d-fe37-4133-138e-edb113767bc8" name="OLED128x64niceWOScope_1" x="784" y="280">
      <params/>
      <attribs>
         <combo attributeName="type" selection="SSD1306"/>
         <combo attributeName="I2CADDR" selection="0x3C"/>
      </attribs>
      <object id="patch/object" uuid="5bde8c3d-fe37-4133-138e-edb113767bc8">
         <sDescription>OLED 128x64 SSD1306 or SH1106 on I2C. PB8=SCL PB9=SDA
      needs a single factory/gpio/i2c/config object</sDescription>
         <license>LGPL</license>
         <helpPatch>OLED128x64niceWOScope.axh</helpPatch>
         <providesModulationSource>false</providesModulationSource>
         <rotatedParams>false</rotatedParams>
         <inlets>
            <charptr32 name="line1"/>
            <charptr32 name="line2"/>
            <charptr32 name="line3"/>
            <charptr32 name="line4"/>
            <bool32 name="disable"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="type">
               <MenuEntries class="java.util.ArrayList">
                  <string>SSD1306</string>
                  <string>SH1106</string>
               </MenuEntries>
               <CEntries class="java.util.ArrayList">
                  <string>1306</string>
                  <string>1106</string>
               </CEntries>
            </combo>
            <combo name="I2CADDR">
               <MenuEntries class="java.util.ArrayList">
                  <string>0x3C</string>
                  <string>0x3D</string>
               </MenuEntries>
               <CEntries class="java.util.ArrayList">
                  <string>0x3C</string>
                  <string>0x3D</string>
               </CEntries>
            </combo>
         </attribs>
         <file-depends/>
         <includes>
            <include>./tiar_font5x8.h</include>
         </includes>
         <depends>
            <depend>SD1</depend>
            <depend>I2CD1</depend>
         </depends>
         <modules/>
         <code.declaration><![CDATA[enum SSD1306 {
LCDWIDTH            = 128,
LCDHEIGHT           = 64,
SETCONTRAST         = 0x81, // 2byte cmd,256 contrast steps, reset = 7F
DISPLAYON           = 0xAF, // entire display on
DISPLAYOFF          = 0xAE, // entire display off
DISPLAYALLON_RESUME = 0xA4,
NORMALDISPLAY       = 0xA6, // invert = 0xA7
DEACTIVATE_SCROLL   = 0x2E, // stop control scroll conf by 26 27 29 2A
MEMORYMODE          = 0x20, // 2byte cmd, 0 horizontal, 1 vertical, 2 page addressing, 3 invalid
COLUMNADDR          = 0x21, // 3bytes, start, end (included) valid in horizontal or vertical mode
PAGEADDR            = 0x22, // 3bytes, start, end (included) valid in horizontal or vertical mode
SETSTARTLINE_0      = 0x40, // set display RAM start line at 0
SEGREMAP            = 0xA0, // segment remap 0 mapped to SEG0
SETMULTIPLEX        = 0xA8, // 2 byte cmd, set mux ratio 
COMSCANDEC          = 0xC8, // scan from COM[N-1] to COM[0] (0xC0 is COM0 to COM[N-1])
SETDISPLAYOFFSET    = 0xD3, // 2 byte cmd, vertical shift
SETCOMPINS          = 0xDA, // 2 byte cmd, seq com pin conf, left right remap
SETDISPLAYCLOCKDIV  = 0xD5, // 2 byte cmd, low nibble A[3:0]+1 = div ratio, high nibble A[7:4] freq, reset 1000b
SETPRECHARGE        = 0xD9, // 2 byte cmd, precharge period A[3:0] phase1 A[7:4] phase2, reset:2
SETVCOMDETECT       = 0xDB, // 2 byte Vcomh deselect level A[6:4] 000b 0.65xVcc 010b 0.77(reset) 011b 0.83
CHARGEPUMP          = 0x8D, // Enable charge pump seq: 0x8D, 0x14, 0xAF (Charge pump setting, enable charge pump, display on)
EXTERNALVCC         = 0x1,
SWITCHCAPVCC        = 0x2
};
uint8_t const nibbleToByte[16]={
0b00000000,
0b00000011,
0b00001100,
0b00001111,
0b00110000,
0b00110011,
0b00111100,
0b00111111,
0b11000000,
0b11000011,
0b11001100,
0b11001111,
0b11110000,
0b11110011,
0b11111100,
0b11111111};

uint8_t *txbuf;
uint8_t *rxbuf;
int32_t mode;

uint8_t text[11*4];    // text inputs
uint8_t textBuf[11*4]; // text inputs copy (to avoid flicker)
bool disable;
    // SETUP
    // ------------------
void cmd(uint8_t c){
  txbuf[0] = 0;
  txbuf[1] = c;
  i2cMasterTransmitTimeout(&I2CD1, attr_I2CADDR, txbuf, 2, rxbuf, 0, 30);
}
void cmd(uint8_t c1, uint8_t c2){  cmd(c1);  cmd(c2);}
void cmd(uint8_t c1, uint8_t c2, uint8_t c3){  cmd(c1, c2);  cmd(c3);}

// _____________________________________________________________________

int drawTxt(int i, int NBC, uint8_t *tb, int page, uint8_t *tPage){
  for(int nc = 0; nc < NBC; nc++){
    int ascii_32 = tb[nc] - ' ';
    const uint8_t *adChar = tiar_font5x8 + ascii_32 * 5;
    for(int slice = 0; slice < 5; slice++){ //slices are two pixel wide
      uint8_t s;
      if((page & 1) == 0){
         s = nibbleToByte[ adChar[slice]       & 15];  // low nibble
      } else {
         s = nibbleToByte[(adChar[slice] >> 4) & 15]; // high nibble
      }
      tPage[i] = s; i++; // two pixel wide
      tPage[i] = s; i++;
    }
    tPage[i] = 0; i++; // separator space 1 pixel wide => 11 pixels per char
  }
  return i;
}
// _____________________________________________________________________
// scaled x2 text
// returns a page to be sent to the SSD1306 based on contents of text
void calcTextPage(int page, uint8_t tPage[128]){
  int i = 0;
  int tLine = page/2;
  uint8_t *tb = textBuf + 11*tLine;
  if(tb[0] >= ' '){  // full text line
    i = drawTxt(i, 11, tb, page, tPage);
    /*for(int nc = 0; nc < 11; nc++){
      int ascii_32 = tb[nc] - ' ';
      const uint8_t *adChar = tiar_font5x8 + ascii_32 * 5;
      for(int slice = 0; slice < 5; slice++){ //slices are two pixel wide
        uint8_t s;
        if((page & 1) == 0){
           s = nibbleToByte[ adChar[slice]       & 15];  // low nibble
        } else {
           s = nibbleToByte[(adChar[slice] >> 4) & 15]; // high nibble
        }
        tPage[i] = s; i++; // two pixel wide
        tPage[i] = s; i++;
      }
      tPage[i] = 0; i++; // separator space 1 pixel wide => 11 pixels per char
      
    }*/
  } else if(tb[0] == 1 ){ //strbar
    uint8_t filledBar = ((page & 1) == 0) ? 0b11100000 : 0b00111111;
    i = drawTxt(i, 5, tb + 2, page, tPage);
    while(i < 63){tPage[i] = 0; i++;} // space padding
    if(tb[1] < 128){ //positive value => filled bar
      tPage[i] = 0; i++;
      for(i = 64; i < 63 + tb[1] && i < 128; i++){
        tPage[i] = filledBar;
      }
    } else {  //negative value => hollow bar
      tPage[i] = filledBar; i++;
      uint8_t hollowBar = ((page & 1) == 0) ? 0b00100000 : 0b00100000;
      for(i = 64; i < 63 + 256 - tb[1] && i < 127; i++){
        tPage[i] = hollowBar;
      }
      tPage[i] = filledBar;
      i++;
    }
  } else if(tb[0] == 2 ){ //bar
    uint8_t filledBar = ((page & 1) == 0) ? 0b11100000 : 0b00111111;
    if(tb[1] <= 128){ //positive value => filled bar
      tPage[i] = 0; i++;
      for(i = 0; i < tb[1]; i++){
        tPage[i] = filledBar;
      }
    } else {  //negative value => hollow bar
      tPage[i] = filledBar; i++;
      uint8_t hollowBar = ((page & 1) == 0) ? 0b00100000 : 0b00100000;
      for(; i < 256 - tb[1]; i++){
        tPage[i] = hollowBar;
      }
      tPage[i] = filledBar;
      i++;
    }
  } else if(tb[0] == 3 ){ //strbar2
    uint8_t filledBar = ((page & 1) == 0) ? 0b11110000 : 0b01111000;
    i = drawTxt(i, 5, tb + 3, page, tPage);
    for(;i < 63; i++){tPage[i] = 0; } // space padding
    int v = tb[1 + (page & 1)];
    if(v < 128){ //positive value => filled bar
      tPage[i] = 0; i++;
      for(i = 64; i < 63 + v && i < 128; i++){
        tPage[i] = filledBar;
      }
    } else {  //negative value => hollow bar
      tPage[i] = filledBar; i++;
      uint8_t hollowBar = ((page & 1) == 0) ? 0b10010000 : 0b01001000;
      for(i = 64; i < 63 + 256 - v && i < 127; i++){
        tPage[i] = hollowBar;
      }
      tPage[i] = filledBar;
      i++;
    }
  } 
  //_______________________________________________________
  else if(tb[0] == 4 ){ //bar dble
    uint8_t filledBar = ((page & 1) == 0) ? 0b11110000 : 0b01111000;
    int v = tb[1 + (page & 1)];
    if(v <= 128){ //positive value => filled bar
      for(i = 0; i < v; i++){
        tPage[i] = filledBar;
      }
    } else {  //negative value => hollow bar
      tPage[i] = filledBar; i++;
      uint8_t hollowBar = ((page & 1) == 0) ? 0b10010000 : 0b01001000;
      for(; i < 256 - v; i++){
        tPage[i] = hollowBar;
      }
      tPage[i] = filledBar;
      i++;
    }
  } 
  for(; i < 128; i++){tPage[i] = 0;} // space padding
  
}
// _____________________________________________________________________
/*
page0
    1
    .
    7
*/
void sendPage(int page){
  /*
    Note: I consider that having a little flickering is not a big deal
    (compared to potential audio glitches).
    So, i do not use the chSysLock() chSysUnlock to protect the memcpy.
  */
  i2cAcquireBus(&I2CD1);
  //prepare transmission to the "page"
  cmd(COLUMNADDR, 0, 127);   // Column start end
  cmd(PAGEADDR, page, page);  // Page start end
  if(attr_type == 1106){
    cmd(0xB0 + page);//set page address
    cmd(2 & 0xf);//set lower column address
    cmd(0x10 | (2 >> 4));//set higher column address
  }
  i2cReleaseBus(&I2CD1);

  // 4 text lines
  //on the beginning of drawing (page 0) we update the buffers
  if(page == 0){
    memcpy(textBuf, text, 11*4);
  }
  calcTextPage(page, txbuf+1);

  //transmit the page
  txbuf[0] = 0x40;
  i2cAcquireBus(&I2CD1);
  i2cMasterTransmitTimeout(&I2CD1, attr_I2CADDR, txbuf, 129, rxbuf, 0, 30);
  i2cReleaseBus(&I2CD1);
}
// _____________________________________________________________________
void init(){
  i2cAcquireBus(&I2CD1);
  // Init sequence
  cmd(DISPLAYOFF);
  // 2 byte cmd,
  //  low nibble A[3:0]+1 = div ratio, 
  //  high nibble A[7:4] freq  reset 1000b 
  cmd(SETDISPLAYCLOCKDIV, 0x80);
  cmd(SETMULTIPLEX, LCDHEIGHT - 1);
  cmd(SETDISPLAYOFFSET, attr_type == 1306 ? 0x00 : 0x01);
  cmd(SETSTARTLINE_0);
  cmd(CHARGEPUMP, 0x14);
  cmd(MEMORYMODE, 0x00); //horizontal
  cmd(SEGREMAP | 0x1);
  cmd(COMSCANDEC);
// 128 x 64
  cmd(SETCOMPINS, 0x12);
  cmd(SETCONTRAST, 0xCF);
  cmd(SETPRECHARGE, 0xF1);
  cmd(SETVCOMDETECT, 0x40);
  cmd(DISPLAYALLON_RESUME);
  cmd(NORMALDISPLAY);
  cmd(DEACTIVATE_SCROLL);
  cmd(DISPLAYON);
  i2cReleaseBus(&I2CD1);
}
// _____________________________________________________________________
void setup(){
  static uint8_t _txbuf[132] __attribute__ ((section (".sram2")));
  static uint8_t _rxbuf[8]   __attribute__ ((section (".sram2")));
  txbuf = _txbuf;
  rxbuf = _rxbuf;
  init();
}

// _____________________________________________________________________
// THREADS
msg_t ThreadX2()
{
  setup();
  while (!chThdShouldTerminate()) {
    if(!disable){
      for(int i = 0; i < 8; i++){
        sendPage(i);
      }
    }
    chThdSleepMilliseconds(32);
  }
  chThdExit((msg_t)0);
}

static msg_t ThreadX(void *arg) {
  ((attr_parent *)arg)->ThreadX2();
}

// 128 is not enough, try 192 <-----------
WORKING_AREA(waThreadX, 192);
Thread *Thd;]]></code.declaration>
         <code.init><![CDATA[
for(int i = 0; i < 11 * 4; i++){
  text[i] = textBuf[i] = ' ';
}
Thd = chThdCreateStatic(waThreadX, sizeof(waThreadX), NORMALPRIO, ThreadX, (void *)this);]]></code.init>
         <code.dispose><![CDATA[chThdTerminate( Thd );
chThdWait( Thd );]]></code.dispose>
         <code.krate><![CDATA[disable = inlet_disable; // can be useful when playing with future modules targetting the same display

if(inlet_line1 != NULL){
  int i = 0;
  while(i < 11 & inlet_line1[i] != '\0'){
  	text[i] = inlet_line1[i];
  	i++;
  }
  while(i < 11 ){text[i] = ' '; i++;}
}

if(inlet_line2 != NULL){
  int i = 0;
  while(i < 11 & inlet_line2[i] != '\0'){
    text[i + 11] = inlet_line2[i];
    i++;
  }
  while(i < 11 ){text[i+11] = ' ';i++;}
}
if(inlet_line3 != NULL){
  int i = 0;
  while(i < 11 & inlet_line3[i] != '\0'){
    text[i + 2*11] = inlet_line3[i];
    i++;
  }
  while(i < 11 ){text[i+2*11] = ' ';i++;}
}
if(inlet_line4 != NULL){
  int i = 0;
  while(i < 11 & inlet_line4[i] != '\0'){
    text[i + 3*11] = inlet_line4[i];
    i++;
  }
  while(i < 11 ){text[i+3*11] = ' ';i++;}
}]]></code.krate>
         <code.srate><![CDATA[]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="gpio/in/analog" uuid="1c0c845ed2d7e06ae5f377ba13d9d09f4747ac87" name="analog_1" x="1078" y="308">
      <params/>
      <attribs>
         <combo attributeName="channel" selection="PC0 (ADC1_IN10)"/>
      </attribs>
   </obj>
   <obj type="disp/chart p" uuid="58f42040a894006a5f73ed8cb8d0bd45481b28cd" name="chart_1" x="1260" y="308">
      <params/>
      <attribs/>
   </obj>
   <obj type="gpio/in/digital" uuid="f59f139e8da912742832dc541157f20f30b7ac1b" name="digital_1" x="364" y="322">
      <params/>
      <attribs>
         <combo attributeName="pad" selection="PC3"/>
         <combo attributeName="mode" selection="pulldown"/>
      </attribs>
   </obj>
   <obj type="ctrl/i radio 4 h" uuid="f87ae81e3162014f3bdca0f56dbbdf9322e69dfd" name="i_1" x="672" y="322">
      <params>
         <int32.hradio name="value" onParent="false" value="0">
            <presets/>
         </int32.hradio>
      </params>
      <attribs/>
   </obj>
   <obj type="lfo/saw down" uuid="d831d6b82b3d559c3ba7b1b487fb292d7998fd08" name="saw_2" x="112" y="336">
      <params>
         <frac32.s.map name="pitch" onParent="false" value="12.0">
            <presets/>
         </frac32.s.map>
      </params>
      <attribs/>
   </obj>
   <obj type="gpio/out/led1" uuid="c6679540460d64e2e71760e61cb82fac227e2764" name="led1_2" x="532" y="350">
      <params/>
      <attribs/>
   </obj>
   <obj type="gpio/in/digital" uuid="f59f139e8da912742832dc541157f20f30b7ac1b" name="digital_2" x="364" y="406">
      <params/>
      <attribs>
         <combo attributeName="pad" selection="PC4"/>
         <combo attributeName="mode" selection="pulldown"/>
      </attribs>
   </obj>
   <obj type="gpio/out/led2" uuid="3d7a4c75d1f9901181a17ba5de752782de911803" name="led2_2" x="532" y="406">
      <params/>
      <attribs/>
   </obj>
   <obj type="lfo/saw down" uuid="d831d6b82b3d559c3ba7b1b487fb292d7998fd08" name="saw_3" x="112" y="434">
      <params>
         <frac32.s.map name="pitch" onParent="false" value="24.0">
            <presets/>
         </frac32.s.map>
      </params>
      <attribs/>
   </obj>
   <obj type="gpio/in/analog" uuid="1c0c845ed2d7e06ae5f377ba13d9d09f4747ac87" name="analog_2" x="1078" y="434">
      <params/>
      <attribs>
         <combo attributeName="channel" selection="PC1 (ADC1_IN11)"/>
      </attribs>
   </obj>
   <obj type="disp/chart p" uuid="58f42040a894006a5f73ed8cb8d0bd45481b28cd" name="chart_2" x="1260" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="gpio/in/digital" uuid="f59f139e8da912742832dc541157f20f30b7ac1b" name="digital_3" x="364" y="490">
      <params/>
      <attribs>
         <combo attributeName="pad" selection="PC5"/>
         <combo attributeName="mode" selection="pulldown"/>
      </attribs>
   </obj>
   <obj type="gpio/out/led1" uuid="c6679540460d64e2e71760e61cb82fac227e2764" name="led1_3" x="532" y="490">
      <params/>
      <attribs/>
   </obj>
   <obj type="lfo/saw down" uuid="d831d6b82b3d559c3ba7b1b487fb292d7998fd08" name="saw_4" x="112" y="532">
      <params>
         <frac32.s.map name="pitch" onParent="false" value="36.0">
            <presets/>
         </frac32.s.map>
      </params>
      <attribs/>
   </obj>
   <obj type="gpio/out/led2" uuid="3d7a4c75d1f9901181a17ba5de752782de911803" name="led2_3" x="532" y="532">
      <params/>
      <attribs/>
   </obj>
   <obj type="gpio/in/analog" uuid="1c0c845ed2d7e06ae5f377ba13d9d09f4747ac87" name="analog_3" x="1078" y="560">
      <params/>
      <attribs>
         <combo attributeName="channel" selection="PC3 (ADC1_IN13)"/>
      </attribs>
   </obj>
   <obj type="disp/chart p" uuid="58f42040a894006a5f73ed8cb8d0bd45481b28cd" name="chart_3" x="1260" y="560">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_1" x="560" y="616">
      <params/>
      <attribs/>
   </obj>
   <obj type="gpio/in/button1" uuid="2f4fbacf3969a3a1ff9d23899566430051cb01f" name="button1_1" x="364" y="630">
      <params/>
      <attribs/>
   </obj>
   <obj type="gpio/in/button2" uuid="e844813dc6e022223cd10d8beb29b62732231867" name="button2_1" x="364" y="672">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_2" x="560" y="672">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="126" y="686">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/in stereo" uuid="99848ad6d90a8e615e83b2e619cfc806f28e7281" name="in_2" x="98" y="756">
      <params/>
      <attribs/>
   </obj>
   <obj type="deadsy/input/debounce4" uuid="8f7dca70-2667-4c57-88d0-7b5c0db3b589" name="debounce4_1" x="434" y="798">
      <params/>
      <attribs>
         <spinner attributeName="period" value="3"/>
         <combo attributeName="mode" selection="fast 0 to 1"/>
      </attribs>
   </obj>
   <nets>
      <net>
         <source obj="sine_1" outlet="wave"/>
         <dest obj="f_to_c_1" inlet="i"/>
      </net>
      <net>
         <source obj="saw_1" outlet="wave"/>
         <dest obj="pwm_2" inlet="pa0"/>
      </net>
      <net>
         <source obj="saw_2" outlet="wave"/>
         <dest obj="pwm_2" inlet="pa1"/>
      </net>
      <net>
         <source obj="saw_3" outlet="wave"/>
         <dest obj="pwm_2" inlet="pa2"/>
      </net>
      <net>
         <source obj="saw_4" outlet="wave"/>
         <dest obj="pwm_2" inlet="pa3"/>
      </net>
      <net>
         <source obj="digital_1" outlet="out"/>
         <dest obj="led1_2" inlet="in"/>
      </net>
      <net>
         <source obj="digital_2" outlet="out"/>
         <dest obj="led2_2" inlet="in"/>
      </net>
      <net>
         <source obj="digital_3" outlet="out"/>
         <dest obj="led1_3" inlet="in"/>
         <dest obj="led2_3" inlet="in"/>
      </net>
      <net>
         <source obj="analog_1" outlet="out"/>
         <dest obj="chart_1" inlet="in"/>
      </net>
      <net>
         <source obj="analog_2" outlet="out"/>
         <dest obj="chart_2" inlet="in"/>
      </net>
      <net>
         <source obj="analog_3" outlet="out"/>
         <dest obj="chart_3" inlet="in"/>
      </net>
      <net>
         <source obj="button1_1" outlet="out"/>
         <dest obj="bool_1" inlet="in"/>
      </net>
      <net>
         <source obj="f_to_c_1" outlet="o"/>
         <dest obj="OLED128x64niceWOScope_1" inlet="line1"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>2143</x>
      <y>143</y>
      <width>1551</width>
      <height>1123</height>
   </windowPos>
</patch>