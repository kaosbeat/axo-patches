<patch-1.0 appVersion="1.0.12">
   <obj type="audio/inconfig" uuid="9a80ef3c19f2a8f81da3a3b7c1c44d18126b97d9" name="inconfig_1" x="196" y="112">
      <params/>
      <attribs>
         <combo attributeName="gain" selection="12dB"/>
         <combo attributeName="boost" selection="20dB"/>
         <combo attributeName="mode" selection="Stereo"/>
      </attribs>
   </obj>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="280" y="196">
      <params/>
      <attribs/>
   </obj>
   <obj type="env/follower" uuid="356ce1d18ac6b51704833f94dac5dea823fb8223" name="follower_2" x="350" y="196">
      <params/>
      <attribs>
         <combo attributeName="time" selection="2.7ms"/>
      </attribs>
   </obj>
   <obj type="math/&gt;c" uuid="99f2934d97d62b715a829979ef6c8abef35dcdb2" name="Treshold_" x="420" y="196">
      <params>
         <frac32.u.map name="c" MidiCC="33" value="21.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="78c5a8c3-c3fe-47da-8bfe-a3346746273e" name="envelope_" x="476" y="196">
      <params>
         <frac32.s.map name="a" MidiCC="34" value="-17.0"/>
         <frac32.s.map name="d" MidiCC="35" value="-50.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="78c5a8c3-c3fe-47da-8bfe-a3346746273e">
         <sDescription>attack hold decay envelope</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.kdecaytime.exp name="a"/>
            <frac32.s.map.kdecaytime.exp name="d"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;]]></code.declaration>
         <code.init><![CDATA[val = 0;]]></code.init>
         <code.krate><![CDATA[if (inlet_gate>0) val = (1<<27) - (___SMMUL((1<<27)-val, param_a)<<1);
   else val = ___SMMUL(val, param_d)<<1;
   outlet_env= val;]]></code.krate>
      </object>
   </patchobj>
   <obj type="audio/out left" uuid="b11a3c09b2fdd575ea8212f2ce7743d5269253b1" name="out_1" x="868" y="196">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="672" y="210">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/in right" uuid="5f35c9f87b3f291a8120a10db71935bebd186469" name="in_2" x="266" y="350">
      <params/>
      <attribs/>
   </obj>
   <obj type="phone_interface_buttons_screen" uuid="f725a976-708d-4323-87f6-f0b42c6aef0e" name="phone_interface_buttons_screen_1" x="238" y="504">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="daee1ce6-92c6-4d98-9cb0-801c1ee91042" name="object_1" x="434" y="504">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="daee1ce6-92c6-4d98-9cb0-801c1ee91042">
         <inlets>
            <bool32 name="top"/>
            <bool32 name="bottom"/>
            <bool32 name="toggle1"/>
            <bool32 name="toggle2"/>
            <frac32.positive name="dial1"/>
            <frac32.positive name="dial2"/>
            <frac32.positive name="dial3"/>
            <frac32.positive name="dial4"/>
            <frac32.positive name="dial5"/>
            <frac32.positive name="dial6"/>
            <bool32 name="button1"/>
            <bool32 name="button2"/>
            <bool32 name="button3"/>
            <bool32 name="button4"/>
            <bool32 name="forward"/>
            <bool32 name="backward"/>
            <bool32 name="up"/>
            <bool32 name="down"/>
         </inlets>
         <outlets>
            <charptr32 name="S1L1"/>
            <charptr32 name="S1L2"/>
            <charptr32 name="S1L3"/>
            <charptr32 name="S1L4"/>
            <int32 name="S1mode"/>
            <charptr32 name="S2L1"/>
            <charptr32 name="S2L2"/>
            <charptr32 name="S2L3"/>
            <charptr32 name="S2L4"/>
            <int32 name="S2mode"/>
            <int32 name="cc1"/>
            <bool32 name="cc1trig"/>
            <frac32.positive name="cc1val"/>
            <frac32.bipolar name="o2freq"/>
            <frac32.positive name="vol"/>
            <int32 name="loadpatch"/>
            <bool32 name="loadtrig"/>
            <bool32 name="scopechannel"/>
         </outlets>
         <displays>
            <int32.label name="d1"/>
         </displays>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[//menu and screen and pot state
char* state[2] = {"params","menu"};
char* patch[7] = {"effects","dangerine","1976","effectsMic", "sidechain",  "side_bd", "side_cy"};
int numstates = *(&state + 1) - state - 1;
int currentstate;
int patchselect;
int menucount = *(&patch + 1) - patch;
bool ppwait1;
bool ppwait2;
bool ppwait3;
bool ppwait4;
bool ppwait5;
bool ppwait6;
int32_t lsend;
int timer;



//int *holdp;
//int *inp
//int 

//main menu params
int volhold;

//button debouncing
int toptrig;
int bottomtrig;


////oscilators



int tresh_hold;
char tresh_c[10];
int att_hold;
char att_c[10];
int dec_hold;
char dec_c[10];

//



//functions
// function definition to swap the values.
void swap(int& x, int& y) {

   int temp;
   temp = x; /* save the value at address x */
   x = y;    /* put y into x */
   y = temp; /* put x into y */
  
   return;
}

// pot pickup function
int32_t ppchange (int in, int* hold, bool &ppwait){
//	if (timer==0) LogTextMessage((char*)(ppwait));
	if (ppwait==true){
		if (abs(in - *hold)>>20 < 2) {
			ppwait = false;
			
		}
		return *hold; ///goes to out!
	} else {
		*hold = in;
		return in; ///goes to out!
	}
}


//append int tot str
char* addItoS(int i, char* s, char* c){
	int32_t v = __SSAT(i,28)>>21;
	strcpy(&c[2],s);
	c[0] = 1;
	if(v >= 0)
  		c[1] = (uint8_t)(v + 1); // must not be zero !
	else 
	  	c[1] = (uint8_t)(256 + v); 
	return c;
}

char* inttobar(int i) {
	char c[2];
	int32_t v = __SSAT(i,28)>>21;
	if(v >= 0)
  		c[0] = (uint8_t)(v + 1); // must not be zero !
	else 
  		c[0] = (uint8_t)(256 + v); 
//  	char k[5];
//  	strncpy(c,k,5);
//  	k[5] = '\0';
//	return k;
	return (char*)(i);
}

void checkToggleState(int inlet, int &trigstate, int &state){
	if (!(inlet>0) && trigstate) {
   		trigstate = 0;
	}
	if ((inlet>0) && !trigstate) {
   		trigstate = 1;
   		if (state == 1)
   			state = 0;
   		else
   			state = 1;
	}
}






///midiCCthin
void midiCCout(int v, int cc, int channel){
	if (((lsend>v+(1<<19))||(v>lsend+(1<<19))) && (timer>60)) {
	   lsend = v;
	   PatchMidiInHandler(MIDI_DEVICE_INTERNAL ,0,MIDI_CONTROL_CHANGE + (channel-1),cc,__USAT(v>>20,7));
	   timer = 0;
	} else timer++;
}]]></code.declaration>
         <code.init><![CDATA[//state
currentstate = 0;
patchselect = 0;
ppwait1=true; //enable potpickup wait on change
ppwait2=true;
ppwait3=true;
ppwait4=true;
ppwait5=true;
ppwait6=true;
//ppwait1=false; //enable potpickup wait on change
//ppwait2=false;
//ppwait3=false;
//ppwait4=false;
//ppwait5=false;
//ppwait6=false;
timer = 0;

//buttons
toptrig = 0;
bottomtrig = 0;


//outlets
//freq1hold = 0;
//freq2hold = 0;
//volhold = 100<<20;\



tresh_hold = 100<<20;
att_hold = 100<<20;
dec_hold = 100<<20;





//
//cc1 = 1;
//cc1trig = 0;
//cc1val  = 0;]]></code.init>
         <code.krate><![CDATA[//// pot pickup function declaration
//int32_t ppchange (int32_t in);//, int32_t* hold);
//void swap(int& x, int& y);

outlet_loadtrig = 0;
outlet_S1L1 = "";
outlet_S1L2 = "";
outlet_S1L3 = "";
outlet_S1L4 = "";
///buttonpresses MENU up/down
if ((inlet_top>0) && !toptrig) {
   if (currentstate < numstates) { 
   	currentstate++;
   } else {
   	currentstate = 0;
   }
   toptrig = 1;
   ppwait1=true; //enable potpickup wait on change
   ppwait2=true;
   ppwait3=true;
   ppwait4=true;
   ppwait5=true;
   ppwait6=true;
}
if (!(inlet_top>0) && toptrig) {
   toptrig = 0;
}


if ((inlet_bottom>0) && !bottomtrig) {
   
   if (currentstate > 0) { 
   	currentstate--;
   } else {
   	currentstate = numstates;
   }
   bottomtrig = 1;
   ppwait1=true; //enable potpickup wait on change
   ppwait2=true;
   ppwait3=true;
   ppwait4=true;
   ppwait5=true;
   ppwait6=true;
}


if (!(inlet_bottom>0) && bottomtrig) {
   bottomtrig = 0;
}

//outlet_S1L1 = state[currentstate];

//midiCCout(127, 1, 1);


if (state[currentstate] == "params"){
	outlet_S1mode = 0;
	outlet_S2mode = 2;
	outlet_S1L1 = "sidechain";
	outlet_scopechannel = 1;
	midiCCout(ppchange (inlet_dial1, &tresh_hold, ppwait1), 33, 1);
	outlet_S1L2 = addItoS(tresh_hold,"tresh",tresh_c);
	midiCCout(ppchange (inlet_dial2, &att_hold, ppwait2), 34, 1);
	outlet_S1L3 = addItoS(att_hold,"attack",att_c);
	midiCCout(ppchange (inlet_dial3, &dec_hold, ppwait3), 35, 1);
	outlet_S1L4 = addItoS(dec_hold,"decay",dec_c);
}




if (state[currentstate] == "menu"){
	outlet_S1mode = 0;
	outlet_S2mode = 2;
	outlet_S1L1 = "menu";
	patchselect = inlet_dial5>>23;
	disp_d1 = menucount;
	outlet_S1L2 = patch[patchselect%menucount];
	outlet_S1L3 = "press B4";
	outlet_S1L4 = "to load";
	outlet_loadpatch = patchselect%menucount;
	outlet_loadtrig = inlet_button4;
	

}]]></code.krate>
      </object>
   </patchobj>
   <obj type="patch/load i" uuid="b79124f5b7d1e8b39e187677ddab6260ce8c60a3" name="load_1" x="616" y="714">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="forward"/>
         <dest obj="object_1" inlet="forward"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="backward"/>
         <dest obj="object_1" inlet="backward"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="top"/>
         <dest obj="object_1" inlet="top"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="bottom"/>
         <dest obj="object_1" inlet="bottom"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="toggle 1"/>
         <dest obj="object_1" inlet="toggle1"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="toggle 2"/>
         <dest obj="object_1" inlet="toggle2"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="dial 1"/>
         <dest obj="object_1" inlet="dial1"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="dial 2"/>
         <dest obj="object_1" inlet="dial2"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="dial 3"/>
         <dest obj="object_1" inlet="dial3"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="dial 4"/>
         <dest obj="object_1" inlet="dial4"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="dial 5"/>
         <dest obj="object_1" inlet="dial5"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="dial 6"/>
         <dest obj="object_1" inlet="dial6"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="up"/>
         <dest obj="object_1" inlet="up"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="down"/>
         <dest obj="object_1" inlet="down"/>
      </net>
      <net>
         <source obj="object_1" outlet="S1L1"/>
         <dest obj="phone_interface_buttons_screen_1" inlet="S1_L1"/>
      </net>
      <net>
         <source obj="object_1" outlet="S1L2"/>
         <dest obj="phone_interface_buttons_screen_1" inlet="S1_L2"/>
      </net>
      <net>
         <source obj="object_1" outlet="S1L3"/>
         <dest obj="phone_interface_buttons_screen_1" inlet="S1_L3"/>
      </net>
      <net>
         <source obj="object_1" outlet="S1L4"/>
         <dest obj="phone_interface_buttons_screen_1" inlet="S1_L4"/>
      </net>
      <net>
         <source obj="object_1" outlet="S1mode"/>
         <dest obj="phone_interface_buttons_screen_1" inlet="S1mode"/>
      </net>
      <net>
         <source obj="object_1" outlet="S2L1"/>
         <dest obj="phone_interface_buttons_screen_1" inlet="S2_L1"/>
      </net>
      <net>
         <source obj="object_1" outlet="S2L2"/>
         <dest obj="phone_interface_buttons_screen_1" inlet="S2_L2"/>
      </net>
      <net>
         <source obj="object_1" outlet="S2L3"/>
         <dest obj="phone_interface_buttons_screen_1" inlet="S2_L3"/>
      </net>
      <net>
         <source obj="object_1" outlet="S2L4"/>
         <dest obj="phone_interface_buttons_screen_1" inlet="S2_L4"/>
      </net>
      <net>
         <source obj="object_1" outlet="S2mode"/>
         <dest obj="phone_interface_buttons_screen_1" inlet="S2mode"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="button 2"/>
         <dest obj="object_1" inlet="button2"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="button 3"/>
         <dest obj="object_1" inlet="button3"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="button 4"/>
         <dest obj="object_1" inlet="button4"/>
      </net>
      <net>
         <source obj="phone_interface_buttons_screen_1" outlet="button 1"/>
         <dest obj="object_1" inlet="button1"/>
      </net>
      <net>
         <source obj="object_1" outlet="loadpatch"/>
         <dest obj="load_1" inlet="i"/>
      </net>
      <net>
         <source obj="object_1" outlet="loadtrig"/>
         <dest obj="load_1" inlet="trig"/>
      </net>
      <net>
         <source obj="follower_2" outlet="amp"/>
         <dest obj="Treshold_" inlet="in"/>
      </net>
      <net>
         <source obj="Treshold_" outlet="out"/>
         <dest obj="envelope_" inlet="gate"/>
      </net>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="follower_2" inlet="in"/>
         <dest obj="phone_interface_buttons_screen_1" inlet="scope2"/>
      </net>
      <net>
         <source obj="envelope_" outlet="env"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="in_2" outlet="wave"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="out_1" inlet="wave"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>47</x>
      <y>61</y>
      <width>1751</width>
      <height>1139</height>
   </windowPos>
</patch-1.0>