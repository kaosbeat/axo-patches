<patch-1.0 appVersion="1.0.12">
   <comment type="patch/comment" x="56" y="70" text="connect PA4 to STB0"/>
   <comment type="patch/comment" x="98" y="84" text="PA5 to CLK"/>
   <comment type="patch/comment" x="98" y="98" text="PA6 and PA7 to DIO"/>
   <comment type="patch/comment" x="98" y="112" text="VDD to VCC"/>
   <comment type="patch/comment" x="98" y="126" text="GND to GND"/>
   <obj type="gpio/spi/config" uuid="d3e75d8a02e2ccabbbc2af3bc2fcdb8ea65a6133" name="spi.begin_1" x="56" y="154">
      <params/>
      <attribs>
         <combo attributeName="clock_polarity" selection="0 when idle"/>
         <combo attributeName="clock_phase" selection="first clock transition is the first data capture edge"/>
         <combo attributeName="baudrate" selection="FPCLK/128"/>
         <combo attributeName="format" selection="LSB first"/>
      </attribs>
   </obj>
   <obj type="script/script2" uuid="d39e743cf47c9221f4e99c133430148cf74c68c5" name="script2_1" x="196" y="154">
      <params/>
      <attribs>
         <text attributeName="script">
            <sText><![CDATA[uint8_t *txbuf;
uint8_t *rxbuf;

// inspired by http://mjoldfield.github.io/pi-tm1638/tm1638_8h.html
// however functionality is reduced to a single tm1638
// not bitbanging but using the SPI port
// The Chibios driver does not seem to work in BIDIR mode, so MISO and MOSI should be connected together.


void tm1638_send_command(uint8_t x){
	SPID1.spi->CR1 |= SPI_CR1_BIDIOE;
	spiSelect(&SPID1);
	txbuf[0] = x;
	spiSend(&SPID1,1,&txbuf[0]);
	spiUnselect(&SPID1);
}

void tm1638_send_data(uint8_t addr, uint8_t data){
	SPID1.spi->CR1 |= SPI_CR1_BIDIOE;
	tm1638_send_command(0x44);
	txbuf[0] = addr|0xc0;
	txbuf[1] = data;
	spiSelect(&SPID1);
	spiSend(&SPID1,2,txbuf);
	spiUnselect(&SPID1);
}

void tm1638_set_led(uint8_t led, uint8_t cols){
	tm1638_send_data((led << 1) + 1, cols);
}

uint8_t tm1638_read_buttons(void){
	txbuf[0] = 0x42;
	txbuf[1] = 0;
	txbuf[2] = 0;
	txbuf[3] = 0;
	txbuf[4] = 0;
	txbuf[5] = 0;
	txbuf[6] = 0;
	txbuf[7] = 0;
	spiSelect(&SPID1);
	spiSend(&SPID1,1,&txbuf[0]);
	palSetPadMode(GPIOA, 7, PAL_MODE_INPUT); // MOSI -> tristate
	spiReceive(&SPID1,4,&rxbuf[0]);
	spiUnselect(&SPID1);
	palSetPadMode(GPIOA, 7, PAL_MODE_ALTERNATE(5)); // MOSI -> output
	uint8_t out = 0;
	out += rxbuf[0]&0x01?1:0;
	out += rxbuf[1]&0x01?2:0;
	out += rxbuf[2]&0x01?4:0;
	out += rxbuf[3]&0x01?8:0;
	out += rxbuf[0]&0x10?16:0;
	out += rxbuf[1]&0x10?32:0;
	out += rxbuf[2]&0x10?64:0;
	out += rxbuf[3]&0x10?128:0;
	return out;
}

char i;
uint8_t buttons_prev; 
uint8_t state8g; 
uint8_t state8r; 

void setup(){
	// allocate buffers suitable for DMA transfert!
	static uint8_t _txbuf[8] __attribute__ ((section (".sram2")));
	static uint8_t _rxbuf[8] __attribute__ ((section (".sram2")));
	txbuf = _txbuf;
	rxbuf = _rxbuf;
	tm1638_send_command(0x8F);
	i = 0;
	buttons_prev = 0;
	state8g = 0;
	state8r = 0;
}

void update_leds(){
	uint8_t g = state8g;
	uint8_t r = state8r;
	int j;
	for(j=0;j<8;j++){
		tm1638_set_led(j, (g&1) + 2 * (r&1));
		g=g>>1;
		r=r>>1;
	}
}

void loop(){
//	chThdSleepMilliseconds(1);
//	uint8_t buttons = tm1638_read_buttons();
//	state8g = parent->PExch[PARAM_INDEX_seqg_b16].value;
//    	state8r = parent->PExch[PARAM_INDEX_seqr_b16].value;
//	uint8_t buttons_pressed = buttons & ~buttons_prev;
//	if (buttons_pressed) {
//		state8g = state8g ^ buttons_pressed;
//		state8r = state8r ^ (state8g & buttons_pressed);
//		PExParameterChange(&parent->PExch[PARAM_INDEX_seqg_b16],state8g,0xFFFD);
//		PExParameterChange(&parent->PExch[PARAM_INDEX_seqr_b16],state8r,0xFFFD);
//	}
//	update_leds();
//	buttons_prev = buttons;
}]]></sText>
         </text>
      </attribs>
   </obj>
   <nets/>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>648</x>
      <y>165</y>
      <width>734</width>
      <height>742</height>
   </windowPos>
</patch-1.0>